// matrix of transition probabilities p(hn+1|hn)
// can be obtained by summing over all (x,y) pairs

let hs_new_on_h = function (ps, h, m, eps) {
    let m_patterns = make_cartesian_product(patterns, m);

    let hs_new_on_xsys_val = _.zipObject(m_patterns, map(function (xs) {
        return _.zipObject(m_patterns, map(function (ys) {
            return hs_new_on_xy(ps, xs, ys, eps);
        }, m_patterns));
    }, m_patterns));

    let ys_on_hxs_val = _.zipObject(m_patterns, map(function (xs) {
        return _.zipObject(m_patterns, map(function (ys) {
            return ys_on_hxs(h, xs, ys, eps);
        }, m_patterns));
    }, m_patterns));

    return mapN(function (h_new) {
        return sum(map(function (xs) {
            return sum(map(function (ys) {
                return hs_new_on_xsys_val[xs][ys][h_new] * ys_on_hxs_val[xs][ys];
            }, m_patterns)) * q(xs);
        }, [m_patterns[0]]));
    }, hypotheses.length);
};

let n_samples = 1000;

let hs_new_on_h_approx = function (ps, h, m, eps) {
    let m_patterns = make_cartesian_product(patterns, m);

    return mapN(function (h_new) {
        return listMean(mapN(function (t) {
            let xs = sample(Categorical({vs: m_patterns}));
            let ys = sample(Categorical({vs: m_patterns}));
            return hs_new_on_xsys(ps, xs, ys, eps)[h_new] * y_on_hx(h, xs, ys, eps);
        }, n_samples));
    }, hypotheses.length)
};

let hs_new_on_hs = function (ps, m, eps) {
    return mapN(function (h) {
        return hs_new_on_h(ps, h, m, eps);
    }, hypotheses.length);
};

let hs_new_on_hs_approx = function (ps, m, eps) {
    return mapN(function (h) {
        return hs_new_on_h_approx(ps, h, m, eps);
    }, hypotheses.length);
};


