// The "language" we have
let bits = ["0", "1"];

// Meanings and utterances each vary along two binary dimensions,
// which yields a total of four meaning/utterance patterns
let patterns = ["00", "01", "10", "11"];

// generate a holistic mapping
let holistics = _.flattenDeep(map(function (x0) {
    map(function (x1) {
        map(function (x2) {
            map(function (x3) {
                return {"00": x0, "01": x1, "10": x2, "11": x3}
            }, patterns)
        }, patterns)
    }, patterns)
}, patterns));

// generate a compositional mapping
let compositionals = _.flattenDeep(map(function (x) {
    map(function (y) {
        let f = function (z) {
            (z[0] === x ? "0" : "1").concat(z[1] === y ? "0" : "1")
        };
        return {"00": f("00"), "01": f("01"), "10": f("10"), "11": f("11")}
    }, bits)
}, bits));


let hypotheses = compositionals.concat(holistics);

let make_prior_distribution = mem(function (alpha) {
    return map(function (x) {
            return alpha / compositionals.length;
        }, compositionals
    ).concat(map(function (x) {
            return (1 - alpha) / holistics.length;
        }, holistics
    ));
});